"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CustomAppDelegate = (function (_super) {
    __extends(CustomAppDelegate, _super);
    function CustomAppDelegate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CustomAppDelegate.prototype.applicationDidFinishLaunchingWithOptions = function (application, launchOptions) {
        console.log("applicationWillFinishLaunchingWithOptions: ", this);
        var center = UNUserNotificationCenter.currentNotificationCenter();
        center.requestAuthorizationWithOptionsCompletionHandler(4 /* Alert */ |
            2 /* Sound */ |
            1 /* Badge */, function (granted, error) {
            console.log("requestAuthorizationWithOptionsCompletionHandler: " + granted);
            console.log(error);
        });
        application.registerForRemoteNotifications();
        console.log(PKPushTypeVoIP);
        // register push kip
        var pushkitVOIP = PKPushRegistry.alloc().initWithQueue(null);
        pushkitVOIP.delegate = this;
        pushkitVOIP.desiredPushTypes = NSSet.setWithObject(PKPushTypeVoIP);
        return true;
    };
    CustomAppDelegate.prototype.applicationDidBecomeActive = function (application) {
        console.log("applicationDidBecomeActive:  " + application);
        console.log("is registered", application.registeredForRemoteNotifications);
    };
    CustomAppDelegate.prototype.applicationDidRegisterForRemoteNotificationsWithDeviceToken = function (application, deviceToken) {
        var token = deviceToken.toString().replace(/[<\s>]/g, "");
    };
    CustomAppDelegate.prototype.applicationDidFailToRegisterForRemoteNotificationsWithError = function (application, error) {
        console.error("failed to register push ", error);
    };
    CustomAppDelegate.prototype.applicationDidReceiveRemoteNotification = function (application, userInfo) {
        console.log("applicationDidReceiveRemoteNotification:" + JSON.stringify(userInfo));
    };
    CustomAppDelegate.prototype.applicationDidReceiveRemoteNotificationFetchCompletionHandler = function (application, userInfo, completionHandler) {
        console.log("applicationDidReceiveRemoteNotificationFetchCompletionHandler:" +
            JSON.stringify(userInfo));
        completionHandler(0 /* NewData */);
    };
    CustomAppDelegate.prototype.applicationDidEnterBackground = function (application) {
        console.log("APP_ENTER_IN_BACKGROUND");
    };
    CustomAppDelegate.prototype.applicationWillEnterForeground = function (application) {
        console.log("APP_ENTER_IN_FOREGROUND");
    };
    CustomAppDelegate.prototype.applicationWillTerminate = function (application) { };
    CustomAppDelegate.prototype.pushRegistryDidInvalidatePushTokenForType = function (registry, type) {
        console.log("PUSHKIT : INVALID_PUSHKIT_TOKEN");
    };
    CustomAppDelegate.prototype.pushRegistryDidReceiveIncomingPushWithPayloadForType = function (registry, payload, type) {
        var application = UIApplication.sharedApplication;
        console.log("PUSHKIT : INCOMING VOIP NOTIFICATION :", payload.dictionaryPayload.description);
    };
    CustomAppDelegate.prototype.pushRegistryDidReceiveIncomingPushWithPayloadForTypeWithCompletionHandler = function (registry, payload, type, completion) {
        var application = UIApplication.sharedApplication;
        console.log("PUSHKIT : INCOMING VOIP NOTIFICATION :", payload.dictionaryPayload.description);
        if (completion)
            completion();
    };
    CustomAppDelegate.prototype.pushRegistryDidUpdatePushCredentialsForType = function (registry, pushCredentials, type) {
        console.log("PUSHKIT : VOIP_TOKEN : ");
    };
    CustomAppDelegate.ObjCProtocols = [UIApplicationDelegate];
    return CustomAppDelegate;
}(UIResponder));
exports.CustomAppDelegate = CustomAppDelegate;
//# sourceMappingURL=data:application/json;base64,